% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_mpt.R
\name{fit_mpt}
\alias{fit_mpt}
\title{Main function}
\usage{
fit_mpt(method, dataset, data, model, id = NULL, condition = NULL,
  core = NULL)
}
\arguments{
\item{method}{Character. A vector specifying which analysis approaches should be performed (see Description below).
Defaults to all available methods.}

\item{dataset}{Character. The name of the dataset to be analyzed.}

\item{data}{A \code{data.frame} containing the data.}

\item{model}{A model definition, typically the path to an \code{.eqn} file.}

\item{id}{Character. Name of the column that contains the subject identifier.
If not specified, it is assumed that each row represents observations from one participant.}

\item{condition}{Character. Name of the column specifying a between-subjects factor.
If not specified, no between-subjects comparisons are performed.}

\item{core}{character vector defining the core parameters of interest, e.g.,
\code{core = c("Dn", "Do")}. All other parameters are treated as auxiliary parameters.}
}
\description{
Does a lot of nice stuff
}
\details{
Maximum-likelihood estimation with MPTinR:
\itemize{
  \item{\code{"asymptotic_complete"}: }{Asymptotic ML theory, complete pooling}
  \item{\code{"asymptotic_no"}: }{ Asymptotic ML theory, no pooling}
  \item{\code{"pb_no"}: }{Parametric bootstrap, no pooling}
  \item{\code{"npb_no"}: }{Nonparametric bootstrap, no pooling}
}
 
Bayesian estimation with TreeBUGS
\itemize{
  \item{\code{"simple"}: }{Bayesian estimation, no pooling (C++, \link[TreeBUGS]{simpleMPT})}
  \item{\code{"simple_pooling"}: }{Bayesian estimation, complete pooling (C++, \link[TreeBUGS]{simpleMPT})}
  \item{\code{"trait"}: }{latent-trait model, partial pooling (JAGS, \link[TreeBUGS]{traitMPT})}
  \item{\code{"trait_uncorrelated"}: }{latent-trait model without correlation parameters, partial pooling (JAGS, \link[TreeBUGS]{traitMPT})}
  \item{\code{"beta"}: }{beta-MPT model, partial pooling (JAGS, \link[TreeBUGS]{betaMPT})}
  \item{\code{"betacpp"}: }{beta-MPT model, partial pooling (C++, \link[TreeBUGS]{betaMPTcpp})}
}
}
\examples{

# ------------------------------------------------------------------------------
# MPT model definition & Data

EQN_FILE <- system.file("extdata", "prospective_memory.eqn", package = "MPTmultiverse")
DATA_FILE <- system.file("extdata", "smith_et_al_2011.csv", package = "MPTmultiverse")

### if .csv format uses semicolons ";" (e.g., German format):
# data <- read.csv2(DATA_FILE, fileEncoding = "UTF-8-BOM")
### if .csv format uses commata "," (international format):
data <- read.csv(DATA_FILE, fileEncoding = "UTF-8-BOM")
data <- data[c(1:10, 113:122),]
head(data)

COL_CONDITION <- "WM_EX"  # name of the variable encoding group membership

# experimental condition should be labeled meaningfully ----
unique(data[[COL_CONDITION]])

data[[COL_CONDITION]] <- factor(
  data[[COL_CONDITION]]
  , levels = 1:2
  , labels = c("low_WM", "high_WM")
)

# define core parameters:
CORE <- c("C1", "C2")

# set test options for a quick and unreliable run:
mpt_options("test")
mpt_options() # to

all_supported_methods <- c(
  "asymptotic_complete"
  , "asymptotic_no"
  , "pb_no"
  , "npb_no"
  , "simple"
  , "simple_pooling"
  , "trait"
  , "trait_uncorrelated"
  , "beta"
)


only_asymptotic <- fit_mpt(
  method = "asymptotic_no"
  , dataset = DATA_FILE
  , data = data
  , model = EQN_FILE
  , condition = COL_CONDITION
  , core = CORE
)

dplyr::glimpse(only_asymptotic)

all_bootstrap <- fit_mpt(
  method = c("pb_no", "npb_no")
  , dataset = DATA_FILE
  , data = data
  , model = EQN_FILE
  , condition = COL_CONDITION
  , core = CORE
)

dplyr::glimpse(all_bootstrap)
}
